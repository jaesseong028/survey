@{
    ViewData["Title"] = "M Index";
    Layout = "~/Views/Shared/EditLayout/_Layout.cshtml";
}
@section Scripts {
<environment include="Development">
    <script src="~/js/vue.js"></script>
</environment>
<environment include="Production">    
    <script src="~/js/vue.min.js"></script>
</environment>
<script src="~/js/edit/Options.js"></script>
<script src="~/js/edit/vue-component-control.js"></script>
<script src="~/js/edit/vue-component-settinglayer.js"></script>
}


<div id="container">
    <div class="col-sm-2 sidenav leftnav">
        <p><label href="#" v-on:click=addsurvey(Terms.checkbox)><span class="glyphicon glyphicon-check"></span> 체크박스</label></p>
        <p><label href="#" v-on:click=addsurvey(Terms.radio)><span class="glyphicon glyphicon-record"></span> 라디오박스 </label></p>
        <p><label href="#" v-on:click=addsurvey(Terms.text)><span class="glyphicon glyphicon-text-background"></span> 텍스트</label></p>
        <p><label href="#" v-on:click=addsurvey(Terms.comment)><span class="glyphicon glyphicon-text-background"></span> 코멘트</label></p>
        <p><label href="#" v-on:click=addsurvey(Terms.rate)><span class="glyphicon glyphicon-indent-left"></span> 등급</label></p>
    </div> 
    <div class="col-sm-7 text-left"> 
        <div class="tabs">
            <div v-for="(page, index) in survey.pages">
                <div class="tab">
                    <label class="labelfor survey" v-if="index == 0" v-bind:class="{setting: survey === settings}"  v-on:click="surveyinfo">설문설정 <span v-bind:class="{sel: survey === settings}" class="glyphicon glyphicon-cog"></span></label>
                    <input type="radio" :id="page.name + '_' + index" name="tabgroup" class="tabgroup" :checked="page == selectPage"  v-on:click="changedPage(index)" >
                    <label class="labelfor" v-bind:class="{setting: page === settings}" :for="page.name + '_' + index">{{page.name}} <span v-bind:class="{sel: page === settings}"  class="glyphicon glyphicon-cog"></span> </label>
                    <label class="plus" v-if="index == survey.pages.length - 1" v-on:click="appendPage(index + 1)">+</label>
                    <div class="tab-container">
                        <controllayout-com :elements=page.elements :settings=settings :terms=Terms></controllayout-com>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-sm-3 sidenav">
       <settinglayout-com :settings=settings></settinglayout-com>
        <pre>
             {{ settings | pretty }}
        </pre>
    </div>
</div>

<script>
    var EventBus = new Vue();
        
    var vue = new Vue({
        el: '#container',
        data: {
            Terms : { radio : 'radio', checkbox : 'checkbox', text : 'text', rate : 'rate', comment : "comment", question : 'question', page : 'page', maxCreatePage : 10 },
            selectPage : null,
            settings : null,
            survey: {
                    title: "",
                    description : "",
                    background_color: "",
                    font_color: "",
                    logo_text: "",
                    logo_background_color: "",
                    logo_font_color: "",
                    pages: [ 
                        { name: "page1", elements: [] }
                    ]
                }
            },
            methods: {
                surveyinfo : function() {
                    this.settings = this.survey;
                },
                appendPage : function(index) {
                    console.log(this.survey.pages.length);
                    if(this.survey.pages.length + 1 > maxCreatePage){
                        alert('최대 ' + maxCreatePage + '개까지 가능합니다.');
                        return;
                    }
                    var papgName = this.emptyName(this.Terms.page);
                    this.survey.pages.push({ name: papgName, elements: [] });
                    this.changedPage(index);
                },
                changedPage : function(index) {
                    this.selectPage = this.survey.pages[index];
                    this.settings = this.survey.pages[index];
                },
                keywatch : function(evt) {
                    var canAction = function () { return ("type" in this.settings) && this.selectPage != null; };
                    if (evt.key == 'Delete') {
                        if (canAction) {
                            var idx = _.findIndex(this.selectPage.elements, this.settings);
                            if(idx != -1) {
                                this.selectPage.elements.splice(idx, 1);
                                if (idx == this.selectPage.elements.length) {
                                    --idx;
                                }
                                this.settings = this.selectPage.elements[idx];
                            }
                        }
                    }
                },
                addsurvey: function (type) {
                    console.log(Options.page);
                    var questionName = this.emptyName(this.Terms.question);
                    var item = { name: questionName, type: type, title: questionName, description: "", is_required : false};
                    if (type == this.Terms.checkbox || type == this.Terms.radio) {
                        item.choices = ["item1", "item2", "item3"];
                    }
                    if( type == this.Terms.rate) {
                        item.choices = [1, 2, 3, 4, 5];
                    }
                    if (type == this.Terms.comment) { 
                        item.rows = 5;
                    }
                    this.selectPage.elements.push(item);
                    this.settings = item;
                    
                    // 스크롤 아래로 이동하기
                    var activetab = $(this.$el).find(".tabs input:radio:checked").siblings(".tab-container");    
                    activetab.animate({ scrollTop: activetab.prop("scrollHeight")}, 100);
                    // 스크롤 아래로 이동하기
                }, 
                edit : function (el) {
                    this.settings = el;
                },
                emptyName : function(subOtType) {
                    var arr = [];
                    var inc = 0;

                    var putInArray = function(ar, n, t) {
                        var i = parseInt(n.replace(t, ""));
                        if (!isNaN(i)) {
                            ar.push(i);
                        }
                    }
                    
                    for (var p=0; p < this.survey.pages.length; p++) {
                        if (subOtType == this.Terms.page) {
                            putInArray(arr, this.survey.pages[p].name, subOtType);
                        }
                        if (subOtType == this.Terms.question) {
                            for (var e=0; e<this.survey.pages[p].elements.length; e++) {
                                putInArray(arr, this.survey.pages[p].elements[e].name, subOtType);
                            }
                        }
                    }


                    if (arr.length == 0)
                        return subOtType + "1";

                    Array.prototype.diff = function(a) {
                        return this.filter(function(i) {return a.indexOf(i) < 0;});
                    };
                    var last = Math.max.apply(null, arr) + 1;
                    
                    var arr1 = Array.from(new Array(last),(val,index)=>index+1);
                    var diff = arr1.diff(arr);
                    var value = Math.min.apply(null,diff);

                    return subOtType + value; 
                }
            }, filters: {
                pretty: function (value) {
                    return JSON.stringify(value, null, 2);
                }
            }, 
            updated  : function() {
                if (('localStorage' in window) && window['localStorage'] != null){
                    localStorage.setItem('survey', JSON.stringify(this.survey));
                }
               
            },
            mounted  : function() {
                if (('localStorage' in window) && window['localStorage'] != null) {
                    var data = JSON.parse(localStorage.getItem('survey'));
                    if(data != null)
                        this.survey = JSON.parse(localStorage.getItem('survey'));
                }
                this.selectPage = this.survey.pages[0];
                this.settings = this.survey.pages[0];
                $("#container").show();
            },
            created : function() {
                
                EventBus.$on('edit', this.edit);
                window.addEventListener('keyup', this.keywatch)
            }, 
            watch : {
               
            }
        }
    );

</script>
